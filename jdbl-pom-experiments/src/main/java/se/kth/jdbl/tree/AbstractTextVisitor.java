package se.kth.jdbl.tree;

import org.apache.commons.io.output.StringBuilderWriter;

import java.io.BufferedWriter;
import java.io.IOException;

/**
 * Base class for visitors that generate an output that is identical
 * to the output generated by the Maven command:
 * <pre>mvn dependency:tree -DoutputType=text</pre>
 */
public abstract class AbstractTextVisitor implements Visitor {

    private final StringBuilderWriter sbw;

    private final BufferedWriter bw;

    public AbstractTextVisitor() {
        sbw = new StringBuilderWriter();
        bw = new BufferedWriter(sbw);
    }

    public void visit(Node node) {
        try {
            writeNode(node);
            for (Node child : node.getChildNodes()) {
                visit(child);
            }
        } catch (IOException e) {
        }
    }

    private void writeNode(Node node) throws IOException {
        //the tree symbols
        writeTreeSymbols(node);
        //the node itself
        bw.write(node.getArtifactCanonicalForm());
        bw.newLine();
    }

    private void writeTreeSymbols(Node node) throws IOException {
        if (node.getParent() != null) {
            writeParentTreeSymbols(node.getParent());
            bw.write(getTreeSymbols(node));
        }
    }

    private void writeParentTreeSymbols(Node node) throws IOException {
        if (node.getParent() != null) {
            writeParentTreeSymbols(node.getParent());
            bw.write(getParentTreeSymbols(node));
        }
    }

    public abstract String getTreeSymbols(Node node);

    public abstract String getParentTreeSymbols(Node node);

    @Override
    public String toString() {
        try {
            bw.flush();
            sbw.flush();
            return sbw.toString();
        } catch (IOException e) {
            return null;
        } finally {
            try {
                bw.close();
            } catch (IOException e) {
            }
            sbw.close();
        }
    }

}
