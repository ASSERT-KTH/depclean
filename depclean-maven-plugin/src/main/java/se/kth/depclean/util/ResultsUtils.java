package se.kth.depclean.util;

import java.util.HashSet;
import java.util.Set;

/**
 * Collects the data from the report generated by depclean on any module of the project.
 */
public class ResultsUtils {

  private final Set<String> unusedDirectArtifactsCoordinates;
  private final Set<String> unusedInheritedArtifactsCoordinates;
  private final Set<String> unusedTransitiveArtifactsCoordinates;
  private final Set<String> allUnusedDependenciesCoordinates = new HashSet<>();

  /**
   * Ctor.
   */
  public ResultsUtils(final Set<String> unusedDirectArtifactsCoordinates,
                      final Set<String> unusedInheritedArtifactsCoordinates,
                      final Set<String> unusedTransitiveArtifactsCoordinates) {
    this.unusedDirectArtifactsCoordinates = unusedDirectArtifactsCoordinates;
    this.unusedInheritedArtifactsCoordinates = unusedInheritedArtifactsCoordinates;
    this.unusedTransitiveArtifactsCoordinates = unusedTransitiveArtifactsCoordinates;
  }

  // Getters ------------------------------------------------------------------------------

  /**
   * Collect all the unused dependencies from the provided result.
   *
   * @return A set of all unused dependencies
   */
  public Set<String> getAllUnusedDependenciesCoordinates() {
    /* Collecting only the unused dependencies, cause in multi-module analysis, build
     will only fail when any unused dependencies iof one module is used by another. */
    allUnusedDependenciesCoordinates.addAll(unusedDirectArtifactsCoordinates);
    allUnusedDependenciesCoordinates.addAll(unusedInheritedArtifactsCoordinates);
    allUnusedDependenciesCoordinates.addAll(unusedTransitiveArtifactsCoordinates);
    return allUnusedDependenciesCoordinates;
  }

  /**
   * To get the type (status) of a dependency.
   *
   * @param coordinates The dependency.
   * @return Type (status)
   */
  public String getType(final String coordinates) {
    if (unusedDirectArtifactsCoordinates.contains(coordinates)) {
      return "unusedDirect";
    } else if (unusedTransitiveArtifactsCoordinates.contains(coordinates)) {
      return "unusedTransitive";
    } else {
      return "unusedInherited";
    }
  }
}
